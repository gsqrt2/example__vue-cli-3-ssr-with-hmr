const fs = require('fs');
const path = require('path');
const MFS = require('memory-fs');
const webpack = require('webpack');

const getWebpackConfig = require('./get-webpack-config');

// Read file in real or virtual file systems
const readFile = (customFs, filePath, file) => {
  try {
    return customFs.readFileSync(path.join(filePath, file), 'utf-8');
  } catch (e) {
    console.error(e);
  }

  return undefined;
};

module.exports = function setupDevServer(app, templatePath, cb) {
  let bundle;
  let template;
  let clientManifest;

  let ready;
  const readyPromise = new Promise(r => {
    ready = r;
  });

  const update = () => {
    if (bundle && clientManifest) {
      ready();
      cb(bundle, {
        template,
        clientManifest,
      });
    }
  };

  template = fs.readFileSync(templatePath, 'utf-8');
  // chokidar.watch(templatePath).on('change', () => {
  //   template = fs.readFileSync(templatePath, 'utf-8')
  //   console.log('index.html template updated.')
  //   update()
  // })

  const clientConfig = getWebpackConfig('client');
  const serverConfig = getWebpackConfig('server');

  clientConfig.entry = ['webpack-hot-middleware/client', clientConfig.entry];
  // dev middleware
  const clientCompiler = webpack(clientConfig);
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true,
    // vue-cli-ssr
    stats: 'none',
    logLevel: 'error',
    index: false,
  });

  app.use(devMiddleware);

  clientCompiler.hooks.done.tap('done', stats => {
    stats = stats.toJson();
    stats.errors.forEach(err => console.error(err));
    stats.warnings.forEach(err => console.warn(err));
    if (stats.errors.length) return;
    clientManifest = JSON.parse(readFile(
      devMiddleware.fileSystem,
      clientConfig.output.path,
      'vue-ssr-client-manifest.json',
    ));
    update();
  });

  // hot middleware
  app.use(require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000 }));

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig);
  const mfs = new MFS();

  serverCompiler.outputFileSystem = mfs;

  serverCompiler.watch({}, (err, stats) => {
    if (err) {
      throw err;
    }
    stats = stats.toJson();
    if (stats.errors.length) return;
    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(
      mfs,
      serverConfig.output.path,
      'vue-ssr-server-bundle.json',
    ));
    update();
  });

  return readyPromise;
};
